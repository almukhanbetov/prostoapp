name: CI/CD Deploy ProstoApp

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: almuko/prostoapp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: 
            ${{ env.IMAGE_NAME }}:latest
          

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: latest

      - name: Setup Kubeconfig
        shell: bash
        run: |
          mkdir -p "$HOME/.kube"
          cat > "$HOME/.kube/config" <<'EOF'
          ${{ secrets.KUBECONFIG }}
          EOF

      - name: Deploy ClusterIssuer (Let's Encrypt)
        run: kubectl apply --validate=false -f k8s/cluster-issuer.yaml

      - name: Deploy Postgres (only if not exists)
        run: |
          if ! kubectl get statefulset postgres -n default >/dev/null 2>&1; then
            echo "Postgres not found. Creating..."
            kubectl apply -f k8s/postgres.yaml
            kubectl rollout status statefulset/postgres -n default --timeout=180s
          else
            echo "‚úÖ Postgres already exists. Skipping creation."
          fi

      - name: Recreate prostoapp-db-secret
        run: |
          kubectl delete secret prostoapp-db-secret -n default --ignore-not-found
          kubectl create secret generic prostoapp-db-secret \
            --from-literal=DATABASE_URL='postgres://postgres:Zxcvbnm123@postgres:5432/prostoapp?sslmode=disable'

      - name: Cleanup old migration job and pods
        run: |
          if kubectl get job prostoapp-migrate -n default >/dev/null 2>&1; then
            echo "üóë Deleting old migration job..."
            kubectl delete job prostoapp-migrate -n default
          fi
          echo "üßπ Cleaning up old migration pods..."
          for pod in $(kubectl get pods -n default -l job-name=prostoapp-migrate -o jsonpath='{.items[*].metadata.name}'); do
            kubectl delete pod -n default $pod --ignore-not-found || true
          done
      - name: Run migrations Job
        run: |
          kubectl apply -f k8s/migrate.yaml
          echo "‚è≥ Waiting for migrations to complete..."
          if ! kubectl wait --for=condition=complete job/prostoapp-migrate -n default --timeout=600s; then
            echo "‚ùå Migration job did not complete. Showing logs from all pods..."
            for pod in $(kubectl get pods -n default -l job-name=prostoapp-migrate -o jsonpath='{.items[*].metadata.name}'); do
              echo "üîπ Logs from pod: $pod"
              kubectl logs -n default $pod || true
              echo "--------------------------------------"
            done
            exit 1
          fi
          echo "‚úÖ Migration job completed successfully."

          echo "üßπ Cleaning up migration job..."
          kubectl delete job prostoapp-migrate -n default --ignore-not-found

      - name: Deploy App (Deployment + Service + Ingress)
        run: kubectl apply -f k8s/prostoapp.yaml

      - name: Wait for app rollout
        run: kubectl rollout status deployment/prostoapp -n default --timeout=180s

      - name: Wait for TLS certificate
        run: |
          echo "‚è≥ Waiting for TLS certificate prostoapp-tls..."
          kubectl wait --for=condition=Ready certificate/prostoapp-tls -n default --timeout=300s || \
            (echo "‚ùå TLS certificate was not issued" && kubectl describe certificate/prostoapp-tls -n default && exit 1)
      - name: Debug protoapp pods if rollout fails
        if: failure()
        run: |
          kubectl get pods -n default
          for pod in $(kubectl get pods -n default -l app=protoapp -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs from $pod"
            kubectl logs -n default $pod --tail=50 || true
            echo "---"
          done

      - name: Test API health endpoint
        run: |
          echo "üåç Testing API endpoint..."
          curl -vk --retry 5 --retry-delay 10 https://prostoapp.compnet.kz/health | grep '"status":"ok"'

      - name: Show Ingress and endpoints
        run: |
          kubectl get ingress -n default
          kubectl get svc -n default
          kubectl get pods -o wide -n default
